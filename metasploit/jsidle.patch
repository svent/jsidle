Index: lib/rex/exploitation/jsidle.rb
===================================================================
--- lib/rex/exploitation/jsidle.rb	(revision 0)
+++ lib/rex/exploitation/jsidle.rb	(revision 0)
@@ -0,0 +1,282 @@
+#
+# JSidle Javascript packer 
+# Author: Sven Taute
+# Version: 1.0
+# Web: http://github.com/svent/jsidle
+#
+require 'digest/md5'
+
+module Rex
+module Exploitation
+
+class JSidle
+
+	MD5_LIB = File.join(Msf::Config.data_directory, "js", "md5-min.js")
+	MD5_FUNC = "hex_md5"
+	GUESS_KEY_COUNT = 5
+	# english language letter frequency
+	LETTER_FREQUENCY = {
+		"a" => 0.0761310205517612,
+		"b" => 0.0195636854368974,
+		"c" => 0.0404640533988629,
+		"d" => 0.0366881926020504,
+		"e" => 0.116102105435379,
+		"f" => 0.0136822823265975,
+		"g" => 0.028795349628028,
+		"h" => 0.0221964153382716,
+		"i" => 0.0876371837275477,
+		"j" => 0.00187991030325584,
+		"k" => 0.00871196202538414,
+		"l" => 0.0537784806945616,
+		"m" => 0.0274565284109197,
+		"n" => 0.0694123195077586,
+		"o" => 0.0613826002431693,
+		"p" => 0.02824570577372,
+		"q" => 0.00183072038633333,
+		"r" => 0.0738116090342629,
+		"s" => 0.0891364068476642,
+		"t" => 0.0664694792605686,
+		"u" => 0.033405300320483,
+		"v" => 0.0104004593910502,
+		"w" => 0.00857615508083721,
+		"x" => 0.00290648248250817,
+		"y" => 0.0169491344178641,
+		"z" => 0.00438645737426362
+	}
+
+	attr_accessor :js
+	attr_reader :opts
+	attr_reader :qstring_key
+
+	def initialize(js = "", opts = {})
+		@rand_chars = ("a".."z").to_a
+		@js = js
+		@qstring_key = rand_string(5 + rand(10))
+		@opts = {
+			:delay => 2,
+			:include_md5lib => true,
+			:mode => :web,
+			:speed => 500,
+			:static => true, 
+			:strip_comments => true,
+		}
+		update_opts(opts)
+	end
+
+	def update_opts(opts)
+		@opts.each_key do |k|
+			@opts[k] = opts[k] if !opts[k].nil?
+		end
+	end
+
+  def <<(str)
+			@js << str
+	end
+	def +(str)
+		@js + str
+	end
+
+	def obfuscate(js)
+		vars = []
+		funcs = []
+		func_args = []
+		method_calls = []
+		symbols_taken = {}
+
+		js = strip_comments(js)
+		vars = js.scan(/var\s+\b(.+?)\b/).flatten
+		funcs = js.scan(/function\s+([A-Za-z0-9_]+)\(/).flatten
+		func_args = js.scan(/function\s+[A-Za-z0-9_]+\(([^)]*)\)/).flatten.map { |e| e.split(/,\s*/) }.flatten
+		labels = js.scan(/^\s*([A-Za-z0-9_]+):\s*$/m).flatten
+
+		[vars, funcs, func_args, labels].flatten.sort {|a, b| b.length <=> a.length}.uniq.each do |arg|
+			  symbol = rand_word(3 + rand(3)) while !symbol || symbols_taken[symbol]
+				symbols_taken[symbol] = true
+				js.gsub!(/\b#{arg}\b/, symbol)
+		end
+		
+		method_calls = js.scan(/((?:[A-Za-z0-9]+\.)*[A-Za-z0-9]+)\.([a-z][A-Za-z0-9_]*)/)
+		method_calls.each do |mc|
+				obj, call = mc
+				js.gsub!(/\b#{obj}\.#{call}\b/, "#{obj}[#{frag_str(call)}]")
+		end
+
+		return js
+	end
+
+	def pack(opts = {})
+		update_opts(opts)
+		js = @js
+		qstring_key = @qstring_key
+		server_key = rand_string(5 + rand(10))
+		salt = rand_string(10 + rand(10))
+		guess_keys = gen_guess_keys(@opts[:speed])
+		key = qstring_key + server_key + guess_keys.join("")
+		guess_keys_md5 = guess_keys.map { |e| Digest::MD5.hexdigest(salt + e) }
+		key_md5 = Digest::MD5.hexdigest(key)
+
+		js = strip_comments(js)	if @opts[:strip_comments]
+		encoded = xor_encode(js, key_md5)
+
+		encoded = encoded.unpack("H*")[0]
+
+		eval_call = @opts[:mode] == :pdf ? "app.eval" : "window.eval"
+
+		js_encoded = <<-ENDJS
+		// prevent known ciphertext, otherwise the xor-key could easily be calculated
+		var dummy = '#{rand_string(20 + rand(30))}';
+		var exploit = '!!!ENCODEDEXPLOIT!!!';
+		var encoded = '';
+		for (i = 0;i<exploit.length;i+=2) {
+			encoded += String.fromCharCode(parseInt(exploit.substring(i, i+2), 16));
+		}
+		var qstring_key = #{if @opts[:static] then "'#{qstring_key}'" else "location.search.substring(1)" end};
+		var server_key = '#{server_key}';
+		var salt = '#{salt}';
+		var guess_keys_md5 = ['#{guess_keys_md5.join("','")}'];
+		var partkey = qstring_key + server_key;
+		var success = false;
+		var key;
+		var guess = ["", "", "", "", ""];
+		var chars = "abcdefghijklmnopqrstuvwxyz";
+
+		for (i = 0; i < #{GUESS_KEY_COUNT}; i++) {
+		var round = 1;
+		while (true) {
+			guess[i] = "";
+			var num = round;
+			while (num > 0) {
+				var mod = num % 26;
+				guess[i] = chars.substring(mod, mod + 1) + guess[i];
+				num = Math.floor(num / 26);
+			}
+			if (#{MD5_FUNC}(salt + guess[i]) == guess_keys_md5[i]) {
+				break;
+			}
+			round++;
+		}
+		}
+		var key = #{MD5_FUNC}(partkey + guess.join(""));
+		var decoded = '';
+		for (i=0;i<encoded.length;i++) {
+				decoded += String.fromCharCode(encoded.charCodeAt(i) ^ key.charCodeAt(i%key.length));
+		}
+
+		#{eval_call}(decoded);
+		ENDJS
+
+		js_encoded = obfuscate(js_encoded)
+		js_encoded.gsub!('!!!ENCODEDEXPLOIT!!!', encoded)
+		if @opts[:include_md5lib] then
+			md5code = File.open(MD5_LIB).read
+			md5code = strip_comments(md5code)
+			js_encoded = md5code + "\r\n" + js_encoded;
+		end
+
+		res = {}
+		[:js, :js_encoded, :key, :qstring_key, :server_key, :guess_keys].each do |var|
+			res[var] = eval var.to_s
+		end
+
+		return res
+	end
+
+	def obfuscate_string(str, t = 0.85)
+		frag_str(str, t)
+	end
+
+protected
+
+	def rand_string(len, chars = nil)
+	chars ||= @rand_chars
+	(1..len).map { |c| chars[rand(chars.length)] }.join
+	end
+
+	def rand_word(len)
+		chars = @rand_chars
+		str = ""
+		while str.length < len do
+			x = rand
+			('a'..'z').inject(0) do |s,e|
+				s += LETTER_FREQUENCY[e]
+				if s>x then
+					str << e
+					break
+				end
+				s
+			end
+		end
+		str
+	end
+
+	def gen_guess_keys(speed)
+		chars = ("a".."z").to_a
+		speed = speed * @opts[:delay]
+		values = 0
+		until values > 0 && values/speed.to_f > 0.7 && values/speed.to_f < 1.3
+			keys = []
+			values = 0
+			GUESS_KEY_COUNT.times do |c|
+				key = ""
+				val = rand(speed * 2 / GUESS_KEY_COUNT)
+				values += val
+				while val > 0
+					m = val % 26
+					key << chars[m]
+					val /= 26
+				end
+				keys << key.reverse
+			end
+		end
+		keys
+	end
+
+	def frag_str(str, t = 0.85, first_call = true)
+		return "'#{str}'" if t < 0.1 || str.length < 2
+		pos = rand(str.length - 1) + 1
+		if rand > t ** 2
+			res = [ encode_str(str[0, pos]), encode_str(str[pos, str.length]) ]
+		else
+			res = [ frag_str(str[0, pos], t ** 2, false), frag_str(str[pos, str.length], t ** 2, false) ]
+		end
+		if first_call then
+			return res.flatten.join(" + ")
+		else
+			return res
+		end
+	end
+
+	def encode_str(str)
+		case rand(2)
+		when 0
+			return "'\\x" + str.unpack("H*")[0].scan(/../).join("\\x") + "'"
+		when 1
+			chars = ("A".."Z").to_a + ("a".."z").to_a + ("0".."9").to_a
+			unused_chars = chars - str.split(//)
+			chars_to_remove = ""
+			call = str.split(//).map do |c|
+				chars_to_remove << rnd = rand_string(1 + rand(2), unused_chars)
+				c + rnd
+			end.join('')
+			return "'#{call}'.replace(/[#{chars_to_remove}]/g, '')"
+		end
+	end
+
+	def xor_encode(str, key)
+			enc = ""
+			pos = 0
+			while pos < str.length
+				enc << (str[pos,1].unpack("C*")[0] ^ key[pos % key.length, 1].unpack("C*")[0]).chr
+				pos += 1
+			end
+			enc
+	end
+
+	def strip_comments(code)
+		code.gsub(%r!^\s*//.*$!, '').gsub(%r!/\*.*?\*/!m, '').gsub(/(\r?\n){2,}/, "\r\n")
+	end
+
+end
+
+end
+end
Index: data/js/md5-min.js
===================================================================
--- data/js/md5-min.js	(revision 0)
+++ data/js/md5-min.js	(revision 0)
@@ -0,0 +1,9 @@
+/*
+ * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
+ * Digest Algorithm, as defined in RFC 1321.
+ * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
+ * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
+ * Distributed under the BSD License
+ * See http://pajhome.org.uk/crypt/md5 for more info.
+ */
+var hexcase=0;function hex_md5(a){return rstr2hex(rstr_md5(str2rstr_utf8(a)))}function hex_hmac_md5(a,b){return rstr2hex(rstr_hmac_md5(str2rstr_utf8(a),str2rstr_utf8(b)))}function md5_vm_test(){return hex_md5("abc").toLowerCase()=="900150983cd24fb0d6963f7d28e17f72"}function rstr_md5(a){return binl2rstr(binl_md5(rstr2binl(a),a.length*8))}function rstr_hmac_md5(c,f){var e=rstr2binl(c);if(e.length>16){e=binl_md5(e,c.length*8)}var a=Array(16),d=Array(16);for(var b=0;b<16;b++){a[b]=e[b]^909522486;d[b]=e[b]^1549556828}var g=binl_md5(a.concat(rstr2binl(f)),512+f.length*8);return binl2rstr(binl_md5(d.concat(g),512+128))}function rstr2hex(c){try{hexcase}catch(g){hexcase=0}var f=hexcase?"0123456789ABCDEF":"0123456789abcdef";var b="";var a;for(var d=0;d<c.length;d++){a=c.charCodeAt(d);b+=f.charAt((a>>>4)&15)+f.charAt(a&15)}return b}function str2rstr_utf8(c){var b="";var d=-1;var a,e;while(++d<c.length){a=c.charCodeAt(d);e=d+1<c.length?c.charCodeAt(d+1):0;if(55296<=a&&a<=56319&&56320<=e&&e<=57343){a=65536+((a&1023)<<10)+(e&1023);d++}if(a<=127){b+=String.fromCharCode(a)}else{if(a<=2047){b+=String.fromCharCode(192|((a>>>6)&31),128|(a&63))}else{if(a<=65535){b+=String.fromCharCode(224|((a>>>12)&15),128|((a>>>6)&63),128|(a&63))}else{if(a<=2097151){b+=String.fromCharCode(240|((a>>>18)&7),128|((a>>>12)&63),128|((a>>>6)&63),128|(a&63))}}}}}return b}function rstr2binl(b){var a=Array(b.length>>2);for(var c=0;c<a.length;c++){a[c]=0}for(var c=0;c<b.length*8;c+=8){a[c>>5]|=(b.charCodeAt(c/8)&255)<<(c%32)}return a}function binl2rstr(b){var a="";for(var c=0;c<b.length*32;c+=8){a+=String.fromCharCode((b[c>>5]>>>(c%32))&255)}return a}function binl_md5(p,k){p[k>>5]|=128<<((k)%32);p[(((k+64)>>>9)<<4)+14]=k;var o=1732584193;var n=-271733879;var m=-1732584194;var l=271733878;for(var g=0;g<p.length;g+=16){var j=o;var h=n;var f=m;var e=l;o=md5_ff(o,n,m,l,p[g+0],7,-680876936);l=md5_ff(l,o,n,m,p[g+1],12,-389564586);m=md5_ff(m,l,o,n,p[g+2],17,606105819);n=md5_ff(n,m,l,o,p[g+3],22,-1044525330);o=md5_ff(o,n,m,l,p[g+4],7,-176418897);l=md5_ff(l,o,n,m,p[g+5],12,1200080426);m=md5_ff(m,l,o,n,p[g+6],17,-1473231341);n=md5_ff(n,m,l,o,p[g+7],22,-45705983);o=md5_ff(o,n,m,l,p[g+8],7,1770035416);l=md5_ff(l,o,n,m,p[g+9],12,-1958414417);m=md5_ff(m,l,o,n,p[g+10],17,-42063);n=md5_ff(n,m,l,o,p[g+11],22,-1990404162);o=md5_ff(o,n,m,l,p[g+12],7,1804603682);l=md5_ff(l,o,n,m,p[g+13],12,-40341101);m=md5_ff(m,l,o,n,p[g+14],17,-1502002290);n=md5_ff(n,m,l,o,p[g+15],22,1236535329);o=md5_gg(o,n,m,l,p[g+1],5,-165796510);l=md5_gg(l,o,n,m,p[g+6],9,-1069501632);m=md5_gg(m,l,o,n,p[g+11],14,643717713);n=md5_gg(n,m,l,o,p[g+0],20,-373897302);o=md5_gg(o,n,m,l,p[g+5],5,-701558691);l=md5_gg(l,o,n,m,p[g+10],9,38016083);m=md5_gg(m,l,o,n,p[g+15],14,-660478335);n=md5_gg(n,m,l,o,p[g+4],20,-405537848);o=md5_gg(o,n,m,l,p[g+9],5,568446438);l=md5_gg(l,o,n,m,p[g+14],9,-1019803690);m=md5_gg(m,l,o,n,p[g+3],14,-187363961);n=md5_gg(n,m,l,o,p[g+8],20,1163531501);o=md5_gg(o,n,m,l,p[g+13],5,-1444681467);l=md5_gg(l,o,n,m,p[g+2],9,-51403784);m=md5_gg(m,l,o,n,p[g+7],14,1735328473);n=md5_gg(n,m,l,o,p[g+12],20,-1926607734);o=md5_hh(o,n,m,l,p[g+5],4,-378558);l=md5_hh(l,o,n,m,p[g+8],11,-2022574463);m=md5_hh(m,l,o,n,p[g+11],16,1839030562);n=md5_hh(n,m,l,o,p[g+14],23,-35309556);o=md5_hh(o,n,m,l,p[g+1],4,-1530992060);l=md5_hh(l,o,n,m,p[g+4],11,1272893353);m=md5_hh(m,l,o,n,p[g+7],16,-155497632);n=md5_hh(n,m,l,o,p[g+10],23,-1094730640);o=md5_hh(o,n,m,l,p[g+13],4,681279174);l=md5_hh(l,o,n,m,p[g+0],11,-358537222);m=md5_hh(m,l,o,n,p[g+3],16,-722521979);n=md5_hh(n,m,l,o,p[g+6],23,76029189);o=md5_hh(o,n,m,l,p[g+9],4,-640364487);l=md5_hh(l,o,n,m,p[g+12],11,-421815835);m=md5_hh(m,l,o,n,p[g+15],16,530742520);n=md5_hh(n,m,l,o,p[g+2],23,-995338651);o=md5_ii(o,n,m,l,p[g+0],6,-198630844);l=md5_ii(l,o,n,m,p[g+7],10,1126891415);m=md5_ii(m,l,o,n,p[g+14],15,-1416354905);n=md5_ii(n,m,l,o,p[g+5],21,-57434055);o=md5_ii(o,n,m,l,p[g+12],6,1700485571);l=md5_ii(l,o,n,m,p[g+3],10,-1894986606);m=md5_ii(m,l,o,n,p[g+10],15,-1051523);n=md5_ii(n,m,l,o,p[g+1],21,-2054922799);o=md5_ii(o,n,m,l,p[g+8],6,1873313359);l=md5_ii(l,o,n,m,p[g+15],10,-30611744);m=md5_ii(m,l,o,n,p[g+6],15,-1560198380);n=md5_ii(n,m,l,o,p[g+13],21,1309151649);o=md5_ii(o,n,m,l,p[g+4],6,-145523070);l=md5_ii(l,o,n,m,p[g+11],10,-1120210379);m=md5_ii(m,l,o,n,p[g+2],15,718787259);n=md5_ii(n,m,l,o,p[g+9],21,-343485551);o=safe_add(o,j);n=safe_add(n,h);m=safe_add(m,f);l=safe_add(l,e)}return Array(o,n,m,l)}function md5_cmn(h,e,d,c,g,f){return safe_add(bit_rol(safe_add(safe_add(e,h),safe_add(c,f)),g),d)}function md5_ff(g,f,k,j,e,i,h){return md5_cmn((f&k)|((~f)&j),g,f,e,i,h)}function md5_gg(g,f,k,j,e,i,h){return md5_cmn((f&j)|(k&(~j)),g,f,e,i,h)}function md5_hh(g,f,k,j,e,i,h){return md5_cmn(f^k^j,g,f,e,i,h)}function md5_ii(g,f,k,j,e,i,h){return md5_cmn(k^(f|(~j)),g,f,e,i,h)}function safe_add(a,d){var c=(a&65535)+(d&65535);var b=(a>>16)+(d>>16)+(c>>16);return(b<<16)|(c&65535)}function bit_rol(a,b){return(a<<b)|(a>>>(32-b))};
\ No newline at end of file
